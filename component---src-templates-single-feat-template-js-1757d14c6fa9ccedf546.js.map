{"version":3,"sources":["webpack://gatsby-starter-default/./node_modules/@material-ui/icons/ArrowBack.js","webpack://gatsby-starter-default/./src/components/feats/single-item-feat.js","webpack://gatsby-starter-default/./src/templates/singleFeatTemplate.js"],"names":["_interopRequireDefault","_interopRequireWildcard","exports","React","_default","default","createElement","d","useStyles","makeStyles","featSection","fontSize","margin","paddingBottom","toolbar","backgroundColor","color","backButton","backIcon","SingleItemPageFeat","props","classes","feat","YMLFeats","name","className","container","Toolbar","IconButton","disableRipple","to","ArrowBack","id","style","lineHeight","cost","toString","length","Object","entries","prerequisites","map","item","index","capTier","charAt","toUpperCase","slice","tierNum","keys","key","values","reduce","acc","currentVal","undefined","attrs","forEach","attrList","attr","value","push","singleAttr","featPrereqs","multiAttrs","description","parseStrToHtml","effect","SingleFeatTemplate","data","allFeatsFeatsYaml","edges","node"],"mappings":"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","file":"component---src-templates-single-feat-template-js-1757d14c6fa9ccedf546.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\"\n}), 'ArrowBack');\n\nexports.default = _default;","import React from 'react';\n\nimport YMLFeats from \"../../core-rules/feats/feats.yml\";\nimport {default as parseStrToHtml} from 'html-react-parser';\n\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { IconButton } from 'gatsby-theme-material-ui';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\n\nconst useStyles = makeStyles(({\n  featSection: {\n    fontSize: '16px',\n    margin: '24px',\n    paddingBottom: '24px'\n  },\n  toolbar: {\n    backgroundColor: 'rgba(81,45,168, 0.9)',\n    color: 'rgba(255,255,255,0.87)',\n    fontSize: '20px',\n  },\n  backButton: {\n    '&:hover': {\n      backgroundColor: 'transparent'\n    }\n  },\n  backIcon: {\n    color: 'rgba(255,255,255,0.87)',\n  }\n}));\n\n\n\n\nexport default function SingleItemPageFeat(props) {\n  const classes = useStyles();\n\n  const feat = YMLFeats.filter(feat => feat.name === props.feat.name)[0];\n\n    return (\n      <div className={classes.container}>\n        <Toolbar className={classes.toolbar}> \n          <IconButton disableRipple to='/feats' className={classes.backButton} >\n            <ArrowBackIcon  className={classes.backIcon} />\n          </IconButton>\n            Back To Feats List\n        </Toolbar>\n        <div className={classes.featSection}>\n                  <h2 id={feat.name} style={{ lineHeight: '40px' }}>\n                    {feat.name}\n                  </h2>\n                  <p><strong>Cost: </strong>\n                    {feat.cost.toString()} {feat.cost.length > 1 ? 'points' : 'point'}\n                  </p>\n                  <p><strong>Prerequisites: </strong></p>\n                  <ul>\n                    <ul>\n                    {\n                      Object.entries(feat.prerequisites).map((item, index) => {\n                        const capTier = item[0].charAt(0).toUpperCase() + item[0].slice(1,4);\n                        const tierNum = item[0].slice(4);\n                        if(Object.keys(item[1])[0] === 'Other') {\n                          return (\n                            <li key={index}>\n                              <strong>{`${capTier} ${tierNum}:`} </strong> \n                              {`${Object.values(item[1])[0]}`}\n                            </li>\n                          )\n                        } else if(Object.entries(item[1])[0][0] === 'Feat' ) {\n                          return (\n                            <li key={`${capTier}${index}`}>\n                              <strong>{`${capTier} ${tierNum}:`} </strong> \n                              {`Feat: ${item[1]['Feat'].reduce((acc, currentVal) => {\n                                  return acc +` ${currentVal},` \n                                }, '').slice(0, -1)}`}\n                            </li>\n                          )\n                        } else if (Object.entries(item[1])[0][0] === 'Attribute'){\n                          if (Object.entries(item[1])[1] !== undefined ) {\n                            // Get attr values for thos with feats\n                            let attrs = '';\n                            Object.entries(Object.values(item[1])[0]).forEach(item => {\n                              attrs += Object.keys(item[1])[0] + ' ' + Object.values(item[1])[0] +', and ' \n                            })\n                            // Get feat values\n                            let feat = 'Feat: '+ Object.entries(Object.values(item[1])[1])[0][1]\n                            return (\n                                <li key={index + capTier}>\n                                  <strong>{`${capTier} ${tierNum}:`} </strong> \n                                  <ul>\n                                    <li>\n                                      {attrs.slice(0, -6)}\n                                    </li>\n                                    <li key={`${index}${capTier}Feat`}>\n                                      {feat}\n                                    </li>\n                                  </ul>\n                                </li>\n                            )\n                          } else if (Object.entries(item[1])[0][1]) {\n                              // this section is for the mimic and other attributes with multi but different form\n                            let attrs = []\n                            const list = Object.entries(Object.values(item[1])[0]).forEach(item => {\n                              const attr = Object.keys(item[1])[0];\n                              const value = Object.values(item[1])[0];\n                              attrs.push([attr, value])\n                            })\n                            const attrList = attrs.map(attr => <li key={attr.index}>{attr[0]}: {attr[1]}</li>)\n                            return (\n                              <li key={index}>\n                                <strong>{`${capTier} ${tierNum}:`} </strong> \n                                  <ul>\n                                    {attrList}\n                                  </ul>\n                              </li>\n                            )\n                          } else {\n                            const singleAttr = ' ' + Object.keys(Object.entries(Object.values(item[1])[0])[0][1])[0] \n                              + ' ' + Object.values(Object.entries(Object.values(item[1])[0])[0][1])[0];\n                            return (\n                              <li key={index}>\n                                <strong>{`${capTier} ${tierNum}:`} </strong> \n                                  <li>\n                                    {singleAttr}\n                                  </li>\n                              </li>\n                            )\n                          }\n                        } else {\n                          const featPrereqs = item[1]['Feat']?.reduce((acc, currentVal) => {\n                            return acc += `${currentVal} and `\n                          }, '').slice(0, -5);\n                          const multiAttrs = item[1]['any']['Attribute'].reduce((acc, currentVal) => {\n                            return acc += `${Object.keys(currentVal)[0]} ${Object.values(currentVal)[0]}, or `;\n                          }, '').slice(0, -5);\n                            return (\n                              <li key={index + item}>\n                                <strong>{`${capTier} ${tierNum}:`} </strong> \n                                  <ul>\n                                    <li>\n                                      {multiAttrs}\n                                    </li>\n                                    { featPrereqs \n                                      ?\n                                        <li>\n                                          {'Feat: ' + featPrereqs}\n                                        </li>\n                                      : null\n                                    }\n                                  </ul>\n                              </li>\n                            )\n                        } \n                      })\n                    }\n                    </ul>\n                  </ul>\n                  <p><strong>Description</strong></p>\n                  <p>{feat.description}</p>\n                  <p><strong>Effect</strong></p>\n                  <div>{parseStrToHtml(feat.effect)}</div>\n                  <p></p> \n                </div>\n      </div>\n    )\n}\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport SingleItemFeat from '../components/feats/single-item-feat';\n\nexport default function SingleFeatTemplate({ data }) {\n  const feat = data.allFeatsFeatsYaml.edges[0].node\n\n  return (\n    <div>\n      <SingleItemFeat  feat={feat}/>\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query SingleFeat($slug: String) {\n    allFeatsFeatsYaml(filter: {fields: {slug: {eq: $slug}}}) {\n      edges {\n        node {\n          name\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}